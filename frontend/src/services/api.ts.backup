import axios from 'axios';

// API Configuration
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5001';

// Create axios instance with default config
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});



// Helper function to get auth headers
const getAuthHeaders = () => {
  const token = localStorage.getItem('clerk-token');
  if (token) {
    return {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    };
  }
  return {
    'Content-Type': 'application/json'
  };
};

// Types for API responses
export interface Sprint {
  milestone_id: number;
  title: string;
  total_issues: number;
  closed_issues: number;
  velocity_hours: number;
  avg_hours_per_issue: number;
}

export interface VelocityStats {
  sprints: Sprint[];
  total_issues_closed: number;
  average_velocity_hours: number;
  backlog_remaining_hours: number;
  estimated_sprints_to_finish_backlog: number;
}

export interface VelocityChart {
  chart_data: string;
  sprints: string[];
  velocities: number[];
}

export interface EpicProgress {
  epic_id: number;
  epic_title: string;
  progress_data: Array<{
    date: string;
    estimated_progress: number;
    actual_progress: number;
  }>;
}

export interface PeriodSuccess {
  epic_id: number;
  from_date: string;
  to_date: string;
  successful: boolean;
  total_issues: number;
  closed_issues: number;
}

export interface EpicSuccess {
  epic_id: number;
  epic_title: string;
  successful: boolean;
}

export interface DeveloperSuccess {
  milestone_id: number;
  milestone_title: string;
  developers: Array<{
    developer: string;
    weeks: Array<{
      week: string;
      closed: number;
      total: number;
      percent: number;
      successful: boolean;
    }>;
  }>;
}

export interface DeveloperSummary {
  developer: string;
  total_issues: number;
  closed_issues: number;
  progress_percent: number;
  successful: boolean;
}

export interface EpicStatus {
  epic_id: number;
  epic_title: string;
  start_date: string;
  due_date: string;
  successful: boolean;
  milestones: Array<{
    milestone_id: number;
    title: string;
    total_issues: number;
    closed_issues: number;
    progress_percent: number;
    successful: boolean;
  }>;
}

export interface Milestone {
  id: number;
  title: string;
  start_date: string;
  due_date: string;
  issues: Array<{
    id: number;
    title: string;
    state: string;
    assignee: string;
    closed_date: string | null;
    milestone_id: number;
  }>;
}

export interface MilestoneSuccess {
  milestone_id: number;
  title: string;
  successful: boolean;
}

export interface GitLabVelocity {
  milestone_id: number;
  milestone_title: string;
  total_issues: number;
  closed_issues: number;
  total_estimated_hours: number;
  total_spent_hours: number;
  velocity_estimated_hours: number;
  velocity_spent_hours: number;
  estimation_accuracy_percent: number;
  avg_hours_per_issue: number;
}

export interface TeamCapacity {
  team_member: string;
  total_issues: number;
  closed_issues: number;
  total_estimated_hours: number;
  total_spent_hours: number;
  velocity_hours: number;
  estimation_accuracy_percent: number;
  avg_hours_per_issue: number;
  completion_rate: number;
}

export interface IssueTypeAnalysis {
  issue_type: string;
  total_count: number;
  closed_count: number;
  total_estimated_hours: number;
  total_spent_hours: number;
  velocity_hours: number;
  estimation_accuracy_percent: number;
  avg_hours_per_issue: number;
  completion_rate: number;
}

export interface PriorityAnalysis {
  priority: string;
  total_count: number;
  closed_count: number;
  total_estimated_hours: number;
  total_spent_hours: number;
  velocity_hours: number;
  estimation_accuracy_percent: number;
  avg_hours_per_issue: number;
  completion_rate: number;
}

export interface BurndownData {
  milestone_id: number;
  milestone_title: string;
  total_estimated_hours: number;
  start_date: string;
  end_date: string;
  burndown_data: Array<{
    date: string;
    actual_remaining_hours: number;
    ideal_remaining_hours: number;
    day_number: number;
  }>;
}

export interface LeadTimeAnalysis {
  total_issues_analyzed: number;
  average_lead_time_days: number;
  median_lead_time_days: number;
  min_lead_time_days: number;
  max_lead_time_days: number;
  lead_time_std_dev: number;
  issues: unknown[];
}

export interface ThroughputAnalysis {
  analysis_period_days: number;
  start_date: string;
  end_date: string;
  total_issues_completed: number;
  average_daily_throughput: number;
  average_weekly_throughput: number;
  daily_throughput: unknown;
  weekly_throughput: unknown;
}

export interface DefectRateAnalysis {
  total_issues: number;
  total_closed_issues: number;
  defect_rate_percent: number;
  closed_defect_rate_percent: number;
  issue_type_breakdown: Record<string, number>;
  closed_issue_type_breakdown: Record<string, number>;
}

export interface VelocityForecast {
  historical_velocities: number[];
  average_velocity_hours: number;
  velocity_trend: number;
  forecasts: Array<{
    sprint_number: number;
    forecasted_velocity_hours: number;
    confidence_level: string;
  }>;
}

export interface TeamVelocityTrends {
  [developer: string]: {
    average_velocity_hours: number;
    velocity_trend: number;
    sprints_analyzed: number;
    velocity_history: unknown[];
  };
}

export interface SprintHealth {
  milestone_id: number;
  milestone_title: string;
  health_status: string;
  completion_rate_percent: number;
  estimation_accuracy_percent: number;
  progress_percentage: number;
  total_issues: number;
  closed_issues: number;
  total_estimated_hours: number;
  total_spent_hours: number;
  velocity_hours: number;
  days_elapsed: number;
  total_days: number;
  days_remaining: number;
}

export interface DashboardOverview {
  summary: {
    total_projects: number;
    total_milestones: number;
    total_epics: number;
    total_issues: number;
    total_closed_issues: number;
    total_estimated_hours: number;
    total_spent_hours: number;
    overall_completion_rate: number;
    estimation_accuracy: number;
  };
  recent_activity: unknown[];
  health_indicators: {
    completion_rate_status: string;
    estimation_accuracy_status: string;
  };
}

export interface TeamDashboard {
  team_capacity: TeamCapacity[];
  team_performance: unknown[];
  lead_time_summary: {
    average_lead_time_days: number;
    total_issues_analyzed: number;
  };
  throughput_summary: {
    total_issues_completed: number;
    average_daily_throughput: number;
    average_weekly_throughput: number;
  };
}

export interface SprintDashboard {
  current_sprint: {
    id: number;
    title: string;
    start_date: string;
    due_date: string;
    progress: unknown;
  };
  upcoming_sprints: unknown[];
  recent_completed_sprints: unknown[];
  velocity_summary: {
    average_velocity_hours: number;
    total_sprints_analyzed: number;
  };
  defect_summary: {
    defect_rate_percent: number;
    total_issues: number;
  };
}

export interface HealthDashboard {
  sprint_health: SprintHealth[];
  epic_health: unknown[];
  overall_health: {
    health_score: number;
    health_status: string;
    total_sprints: number;
    excellent_sprints: number;
    good_sprints: number;
  };
}

export interface Epic {
  id: number;
  title: string;
  start_date: string;
  due_date: string;
  project_id: number;
}

export interface GitLabImportRequest {
  project_ids: number[];
  gitlab_url?: string;
  access_token: string;
}

export interface GitLabImportResponse {
  message: string;
  results: Array<{
    project_id: number;
    milestones_imported: number;
    issues_imported: number;
  }>;
}

export interface UserProfile {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
}

export interface TokenVerification {
  valid: boolean;
  user: {
    id: string;
    email: string;
  };
}

export interface Project {
  id: number;
  name: string;
  milestone_count: number;
  epic_count: number;
  issue_count: number;
}

export interface ProjectMilestone {
  id: number;
  title: string;
  start_date: string;
  due_date: string;
  project_id: number;
  issue_count: number;
  closed_issue_count: number;
}

export interface ProjectEpic {
  id: number;
  title: string;
  start_date: string;
  due_date: string;
  project_id: number;
  milestone_count: number;
}

// API Service Class
export class GitLabAnalyticsAPI {
  // Authentication - Now handled by Clerk
  // JWT tokens are automatically managed by the useAuth hook

  // Health Check
  static async healthCheck() {
    const response = await apiClient.get('/health', { headers: getAuthHeaders() });
    return response.data;
  }

  // Core Analytics
  static async getVelocityStats(backlog?: number, projectId?: number): Promise<VelocityStats> {
    const params: any = {};
    if (backlog) params.backlog = backlog;
    if (projectId) params.project_id = projectId;
    
    const response = await apiClient.get('/analytics/velocity/stats', { 
      params,
      headers: getAuthHeaders()
    });
    return response.data;
  }

  static async getVelocityChart(projectId?: number): Promise<VelocityChart> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/velocity/chart', { 
      params,
      headers: getAuthHeaders()
    });
    return response.data;
  }

  static async getEpicProgress(epicId: number, projectId?: number): Promise<Array<{
    date: string;
    estimated: number;
    actual: number;
  }>> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get(`/epic/progress/${epicId}`, { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async checkPeriodSuccess(
    epicId: number,
    fromDate: string,
    toDate: string,
    projectId?: number
  ): Promise<PeriodSuccess> {
    const params: any = { from_date: fromDate, to_date: toDate };
    if (projectId) params.project_id = projectId;
    const response = await apiClient.get(`/analytics/period-success/${epicId}`, { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getEpicSuccess(projectId?: number): Promise<EpicSuccess[]> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/epic-success', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getDeveloperSuccess(projectId?: number): Promise<DeveloperSuccess[]> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/developer-success', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getDeveloperSummary(projectId?: number): Promise<DeveloperSummary[]> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/developer-summary', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getEpicStatus(projectId?: number): Promise<EpicStatus[]> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/epic-status', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getMilestones(projectId?: number): Promise<Milestone[]> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/milestones', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getMilestoneSuccess(projectId?: number): Promise<MilestoneSuccess[]> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/milestone-success', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  // GitLab Time-Based Analytics
  static async getGitLabVelocity(projectId?: number): Promise<GitLabVelocity[]> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/gitlab/velocity', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getTeamCapacity(projectId?: number): Promise<TeamCapacity[]> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/team-capacity', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getIssueTypeAnalysis(projectId?: number): Promise<IssueTypeAnalysis[]> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/issue-type-analysis', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getPriorityAnalysis(projectId?: number): Promise<PriorityAnalysis[]> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/priority-analysis', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getBurndownData(milestoneId: number, projectId?: number): Promise<BurndownData> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get(`/analytics/burndown/${milestoneId}`, { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  // Advanced Analytics
  static async getLeadTimeAnalysis(projectId?: number): Promise<LeadTimeAnalysis> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/lead-time', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getThroughputAnalysis(days?: number, projectId?: number): Promise<ThroughputAnalysis> {
    const params: any = {};
    if (days) params.days = days;
    if (projectId) params.project_id = projectId;
    const response = await apiClient.get('/analytics/throughput', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getDefectRateAnalysis(projectId?: number): Promise<DefectRateAnalysis> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/defect-rate', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getVelocityForecast(sprintsAhead?: number, projectId?: number): Promise<VelocityForecast> {
    const params: any = {};
    if (sprintsAhead) params.sprints_ahead = sprintsAhead;
    if (projectId) params.project_id = projectId;
    const response = await apiClient.get('/analytics/velocity-forecast', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getTeamVelocityTrends(projectId?: number): Promise<TeamVelocityTrends> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/team-velocity-trends', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getSprintHealth(milestoneId: number, projectId?: number): Promise<SprintHealth> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get(`/analytics/sprint-health/${milestoneId}`, { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  // Dashboard Endpoints
  static async getDashboardOverview(projectId?: number): Promise<DashboardOverview> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/dashboard/overview', { 
      params,
      headers: getAuthHeaders()
    });
    return response.data;
  }

  static async getTeamDashboard(projectId?: number): Promise<TeamDashboard> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/dashboard/team', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getSprintDashboard(projectId?: number): Promise<SprintDashboard> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/dashboard/sprint', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getHealthDashboard(projectId?: number): Promise<HealthDashboard> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/dashboard/health', { params }, { headers: getAuthHeaders() });
    return response.data;
  }

  // Basic Data Endpoints
  static async getEpics(projectId?: number): Promise<Epic[]> {
    const params = projectId ? { project_id: projectId } : {};
    const response = await apiClient.get('/analytics/epic-status', { params }, { headers: getAuthHeaders() });
    return response.data.map((epic: { epic_id: number; epic_title: string; start_date: string; due_date: string }) => ({
      id: epic.epic_id,
      title: epic.epic_title,
      start_date: epic.start_date,
      due_date: epic.due_date,
    }));
  }

  static async getProjects(): Promise<Project[]> {
    const response = await apiClient.get('/analytics/projects', { headers: getAuthHeaders(, { headers: getAuthHeaders() }) });
    return response.data;
  }

  static async getProjectMilestones(projectId: number): Promise<ProjectMilestone[]> {
    const response = await apiClient.get(`/analytics/projects/${projectId}/milestones`, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getProjectEpics(projectId: number): Promise<ProjectEpic[]> {
    const response = await apiClient.get(`/analytics/projects/${projectId}/epics`, { headers: getAuthHeaders() });
    return response.data;
  }

  static async getMilestonesList(): Promise<Milestone[]> {
    const response = await apiClient.get('/milestones', { headers: getAuthHeaders() });
    return response.data;
  }

  // GitLab Integration
  static async importFromGitLab(data: GitLabImportRequest): Promise<GitLabImportResponse> {
    const response = await apiClient.post('/import/gitlab', data);
    return response.data;
  }

  // Authentication Endpoints
  static async getUserProfile(): Promise<UserProfile> {
    const response = await apiClient.get('/auth/me', { headers: getAuthHeaders() });
    return response.data;
  }

  static async verifyToken(token: string): Promise<TokenVerification> {
    const response = await apiClient.post('/auth/verify', { token });
    return response.data;
  }

  static async getProtectedRoute(): Promise<unknown> {
    const response = await apiClient.get('/auth/protected', { headers: getAuthHeaders() });
    return response.data;
  }

  static async getOptionalAuthRoute(): Promise<unknown> {
    const response = await apiClient.get('/auth/optional', { headers: getAuthHeaders() });
    return response.data;
  }
}

export default GitLabAnalyticsAPI;
